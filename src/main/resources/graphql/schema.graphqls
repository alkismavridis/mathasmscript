scalar Long

schema {
    query: Query
    mutation: Mutation
}

type Query {
    theories: [Theory!]!
    execute(theoryId: Long!, script:String!): ParserResult!
    ls(theoryId: Long!, packageName:String!): PackageContent!
    lsParent(theoryId: Long!, packageName:String!): PackageContent!
    cat(theoryId: Long!, file:String!) : MasScript

    dependencies(statementId: Long!) : [FixedMasStatement!]!
}

type Mutation {
    commit(theoryId: Long!, script:String!): ParserResult!
    mkdir(name: String!, parentPath: String!, theoryId: Long!) : MasPackage!
    rmdir(path: String!, theoryId: Long!) : Boolean
}

type Theory {
    id: Long!
    name: String!
}

type MasPackage {
    name: String!
    path: String!
    theoryId: Long!
    id: Long!
}

type FixedMasStatement {
    name: String!
    path: String!
    text: String!
    type: String!
    theoryId: Long!
    id: Long!
}

type PackageContent {
    packageData: MasPackage!
    statements: [FixedMasStatement!]!
    packages: [MasPackage!]!
}

type MasScript {
    contents:String
    fileName:String
    theoryId: Long!
}

type ParserResult {
    status: String
    packageName: String
    scriptName: String
    variables: [MasVariable!]!
    comments: [InspectionComment!]!
}

type MasVariable {
    kind: String!
    name: String!
    value: FixedMasStatement!
    importUrl: String!
}

type InspectionComment {
    line: Int!
    column: Int!
    message: String!
    type: String!
}
